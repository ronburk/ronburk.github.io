<?xml version="1.0" ?>
<Xml>
<head>
    <title>
        Module Cycles
    </title>
</head>
<body>
    <h1>Module Cycles</h1>
    <p>
        If you make a graph with JavaScript modules as nodes and
        viewing their contained import statements as "arrows"
        pointing at other nodes,
        you can end up with cycles in your graph.
        A simple example is you import "a.js" which itself
        imports "b.js", which in turn happens to be
        importing some functions from "a.js".
        This is another reason you will be writing code that detects
        when a module has already been loaded.
    </p>
    <p>
        <a href="https://exploringjs.com/impatient-js/ch_modules.html#esms-transparent-support-for-cyclic-imports-advanced">JavaScript for impatient programmers says the language</a>
        <blockquote>
            supports cyclic imports transparently.
        </blockquote>
        and also:
        <blockquote>
            handles cyclic imports correctly.
        </blockquote>
        I feel dubious because I'm pretty sure I can
        construct a mutual dependence between modules
        that has no correct meaning
        (but maybe I just have
        <a href="https://en.wikipedia.org/wiki/Entscheidungsproblem">Entscheidungsproblem</a>
        on the brain).
    </p>
    <p>
        To see what I mean, here's "a.mjs":
        <pre><code>
            /* module a */
            import {b} from "b.mjs";

            export let aval = b(45);
        </code></pre>
        and here's "b.mjs":
        <pre><code>
            /* module b */
            import {aval} from "a.mjs";
            export function b(num) { return aval + 1; }
        </code></pre>
        Remember that part of making a module ready to use
        is "evaluating" it (executing its code).
        Evaluating "a.mjs" requires calling function
        <code>b()</code> from "b.mjs".
        Now, a smart human could look at this and say
        <q>hey, this can work if you evaluate "b.mjs" first!</q>
        See, evaluating "a.mjs" absolutely requires executing a
        call to <code>b(45)</code>,
        and we don't get to execute code from module "b.mjs"
        until that module has been evaulated.
        So clearly we can't evaluate "a.mjs" first.
        What if we evaluate "b.mjs" first?
        In this case, 
    </p>
    <p>
        The first time JavaScript encounters an "import" statement,
        that could lead to a pretty long list of modules to import.
        In other words, the first module may import from other modules
        that in turn import from still other modules.
        This is most naturally defined as a recursive process that
        stops recursing when it hits modules that import no
        modules that have not already been loaded.
        However, just to be contrary, I will implement a non-recursive
        module load.
    </p>

    <p>
    </p>
</body>
</Xml>

